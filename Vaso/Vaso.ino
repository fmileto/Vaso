/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/306d4b4a-df0d-4a29-afdc-a9bac14dd95b

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float currentHumid;
  float currentTemp;
  int currentMoist;
  int triggerLevel;
  bool pumpStatus;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include <dht.h>

#define MOIST_APIN A0
#define DHT_APIN A1
#define LDR_APIN A2
#define RELAY 12
#define ENABLE_MOIST 2
#define MIN_MOIST 240
#define MAX_MOIST 1024

#define MAX_ADC_READING           1023
#define ADC_REF_VOLTAGE           5.0
#define REF_RESISTANCE            5030  // measure this for best results
#define LUX_CALC_SCALAR           12518931
#define LUX_CALC_EXPONENT         -1.405

float R1 = 10000;
float c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;

int pumpTrigger = 30;
int moisture;
float envHumid;
float envTemp;
int envLight;
dht DHT;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  moisture = readMoistureHumidity();
  envTemp = readEnvTemperature();
  envHumid = readEnvTemperature();
  envLight = readLightLux();
  
  currentHumid = envHumid;
  currentTemp = envTemp;
  currentMoist = moisture;
  
  Serial.println("Moisture: " + String(moisture) + "%")
  Serial.println("Env Temp: " + String(envTemp) + "°")
  Serial.println("Env Humid: " + String(envHumid) + "%")
  Serial.println("Env Light: " + String(envLight) + "lux")
  
  if (moisture <= pumpTrigger)
  {
    // Turn pump on
    pumpOn();
  }
  else
  {
    // Turn pump off
    pumpOff();
  }
}

void pumpOn(){
    Serial.println("Start irrigate");
    pumpStatus = true;
    digitalWrite(RELAY, HIGH);
}

void pumpOff(){
    Serial.println("Stop irrigate");
    pumpStatus = false;
    digitalWrite(RELAY, LOW);
}

float readEnvTemperature() {
  DHT.read11(DHT_APIN);
  int t = 0;
  for(int i = 0; i<10; i++){
    t += DHT.temperature;
    delay(50);
  }
  t /= 10;
  return t;
}

float readEnvHumidity() {
  DHT.read11(DHT_APIN);
  int h = 0;
  for(int i = 0; i<10; i++){
    h += DHT.h;
    delay(50);
  }
  h /= 10;
  return h;
}

int readLightLux() {
  int   ldrRawData;
  float resistorVoltage, ldrVoltage;
  float ldrResistance;
  float ldrLux;
  ldrRawData = analogRead(LDR_APIN);
  // RESISTOR VOLTAGE_CONVERSION
  // Convert the raw digital data back to the voltage that was measured on the analog pin
  resistorVoltage = (float)ldrRawData / MAX_ADC_READING * ADC_REF_VOLTAGE;

  // voltage across the LDR is the 5V supply minus the 5k resistor voltage
  ldrVoltage = ADC_REF_VOLTAGE - resistorVoltage;
  
  // LDR_RESISTANCE_CONVERSION
  // resistance that the LDR would have for that voltage  
  ldrResistance = ldrVoltage/resistorVoltage * REF_RESISTANCE;
  
  // LDR_LUX
  // Change the code below to the proper conversion from ldrResistance to
  // ldrLux
  ldrLux = LUX_CALC_SCALAR * pow(ldrResistance, LUX_CALC_EXPONENT);

  return ldrLux;
}

int readMoistureHumidity(){
  // turn on moist sens
  // reset relay
  digitalWrite(ENABLE_MOIST, HIGH);
  delay(200);
  int h2oValRaw = 0;
  for(int i = 0; i<10; i++){
    h2oValRaw += analogRead(MOIST_APIN);
    delay(50);
  }
  h2oValRaw /= 10; 
  // turn off moist
  digitalWrite(ENABLE_MOIST, LOW);

  int mPercent = map(h2oValRaw, MIN_MOIST, MAX_MOIST, 100, 0);
  mPercent = constrain(mPercent, 0, 100);
  Serial.println("Umidità: " + String(mPercent) + "%\traw: " + String(h2oValRaw)); //Stampa a schermo il valore
  return mPercent;
}



/*
  Since TriggerLevel is READ_WRITE variable, onTriggerLevelChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTriggerLevelChange()  {
  pumpTrigger = triggerLevel;
}


